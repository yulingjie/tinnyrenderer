!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHITECTURE_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/ylj\/tinnyrenderer\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ylj\/tinnyrenderer$/;"	m
COMPILER_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CPPFLAGS	tinyrenderer/Makefile	/^CPPFLAGS     = -Wall -Wextra -Weffc++ -pedantic -std=c++98$/;"	m
CXX_STD	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD /;"	d	file:
C_DIALECT	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
DEC	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DESTDIR	tinyrenderer/Makefile	/^DESTDIR = .\/$/;"	m
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
Format	tinyrenderer/tgaimage.h	/^    enum Format {$/;"	g	class:TGAImage
GRAYSCALE	tinyrenderer/tgaimage.h	/^        GRAYSCALE=1, RGB=3, RGBA=4$/;"	e	enum:TGAImage::Format
HEX	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IShader	tinyrenderer/our_gl.h	/^struct IShader {$/;"	s
LDFLAGS	tinyrenderer/Makefile	/^LDFLAGS      = -O3$/;"	m
LIBS	tinyrenderer/Makefile	/^LIBS         = -lm$/;"	m
Matrix	tinyrenderer/geometry.h	/^typedef mat<4,4,float> Matrix;$/;"	t
Model	tinyrenderer/model.cpp	/^Model::Model(const char *filename) : verts_(), faces_(), norms_(), uv_(), diffusemap_(), normalmap_(), specularmap_() {$/;"	f	class:Model
Model	tinyrenderer/model.h	/^class Model {$/;"	c
ModelView	tinyrenderer/our_gl.cpp	/^Matrix ModelView;$/;"	v
OBJECTS	tinyrenderer/Makefile	/^OBJECTS := $(patsubst %.cpp,%.o,$(wildcard *.cpp))$/;"	m
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
Projection	tinyrenderer/our_gl.cpp	/^Matrix Projection;$/;"	v
RGB	tinyrenderer/tgaimage.h	/^        GRAYSCALE=1, RGB=3, RGBA=4$/;"	e	enum:TGAImage::Format
RGBA	tinyrenderer/tgaimage.h	/^        GRAYSCALE=1, RGB=3, RGBA=4$/;"	e	enum:TGAImage::Format
RM	build/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
STRINGIFY	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SYSCONF_LINK	tinyrenderer/Makefile	/^SYSCONF_LINK = g++$/;"	m
Shader	tinyrenderer/main.cpp	/^struct Shader : public IShader {$/;"	s	file:
TARGET	tinyrenderer/Makefile	/^TARGET  = main$/;"	m
TGAColor	tinyrenderer/tgaimage.h	/^    TGAColor() : bgra(), bytespp(1) {$/;"	f	struct:TGAColor
TGAColor	tinyrenderer/tgaimage.h	/^    TGAColor(const unsigned char *p, unsigned char bpp) : bgra(), bytespp(bpp) {$/;"	f	struct:TGAColor
TGAColor	tinyrenderer/tgaimage.h	/^    TGAColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A=255) : bgra(), bytespp(4) {$/;"	f	struct:TGAColor
TGAColor	tinyrenderer/tgaimage.h	/^    TGAColor(unsigned char v) : bgra(), bytespp(1) {$/;"	f	struct:TGAColor
TGAColor	tinyrenderer/tgaimage.h	/^struct TGAColor {$/;"	s
TGAImage	tinyrenderer/tgaimage.cpp	/^TGAImage::TGAImage() : data(NULL), width(0), height(0), bytespp(0) {}$/;"	f	class:TGAImage
TGAImage	tinyrenderer/tgaimage.cpp	/^TGAImage::TGAImage(const TGAImage &img) : data(NULL), width(img.width), height(img.height), bytespp(img.bytespp) {$/;"	f	class:TGAImage
TGAImage	tinyrenderer/tgaimage.cpp	/^TGAImage::TGAImage(int w, int h, int bpp) : data(NULL), width(w), height(h), bytespp(bpp) {$/;"	f	class:TGAImage
TGAImage	tinyrenderer/tgaimage.h	/^class TGAImage {$/;"	c
TGA_Header	tinyrenderer/tgaimage.h	/^struct TGA_Header {$/;"	s
Vec2f	tinyrenderer/geometry.h	/^typedef vec<2,  float> Vec2f;$/;"	t
Vec2i	tinyrenderer/geometry.h	/^typedef vec<2,  int>   Vec2i;$/;"	t
Vec3f	tinyrenderer/geometry.h	/^typedef vec<3,  float> Vec3f;$/;"	t
Vec3i	tinyrenderer/geometry.h	/^typedef vec<3,  int>   Vec3i;$/;"	t
Vec4f	tinyrenderer/geometry.h	/^typedef vec<4,  float> Vec4f;$/;"	t
Viewport	tinyrenderer/our_gl.cpp	/^Matrix Viewport;$/;"	v
__GEOMETRY_H__	tinyrenderer/geometry.h	/^#define __GEOMETRY_H__$/;"	d
__IMAGE_H__	tinyrenderer/tgaimage.h	/^#define __IMAGE_H__$/;"	d
__MODEL_H__	tinyrenderer/model.h	/^#define __MODEL_H__$/;"	d
__OUR_GL_H__	tinyrenderer/our_gl.h	/^#define __OUR_GL_H__$/;"	d
adjugate	tinyrenderer/geometry.h	/^    mat<DimRows,DimCols,T> adjugate() const {$/;"	f	class:mat
barycentric	tinyrenderer/our_gl.cpp	/^Vec3f barycentric(Vec2f A, Vec2f B, Vec2f C, Vec2f P) {$/;"	f
bgra	tinyrenderer/tgaimage.h	/^    unsigned char bgra[4];$/;"	m	struct:TGAColor
bitsperpixel	tinyrenderer/tgaimage.h	/^    char  bitsperpixel;$/;"	m	struct:TGA_Header
buffer	tinyrenderer/tgaimage.cpp	/^unsigned char *TGAImage::buffer() {$/;"	f	class:TGAImage
bytespp	tinyrenderer/tgaimage.h	/^    int bytespp;$/;"	m	class:TGAImage
bytespp	tinyrenderer/tgaimage.h	/^    unsigned char bytespp;$/;"	m	struct:TGAColor
clear	tinyrenderer/tgaimage.cpp	/^void TGAImage::clear() {$/;"	f	class:TGAImage
cofactor	tinyrenderer/geometry.h	/^    T cofactor(size_t row, size_t col) const {$/;"	f	class:mat
col	tinyrenderer/geometry.h	/^    vec<DimRows,T> col(const size_t idx) const {$/;"	f	class:mat
colormapdepth	tinyrenderer/tgaimage.h	/^    char colormapdepth;$/;"	m	struct:TGA_Header
colormaplength	tinyrenderer/tgaimage.h	/^    short colormaplength;$/;"	m	struct:TGA_Header
colormaporigin	tinyrenderer/tgaimage.h	/^    short colormaporigin;$/;"	m	struct:TGA_Header
colormaptype	tinyrenderer/tgaimage.h	/^    char colormaptype;$/;"	m	struct:TGA_Header
const	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
cross	tinyrenderer/geometry.h	/^template <typename T> vec<3,T> cross(vec<3,T> v1, vec<3,T> v2) {$/;"	f
data	tinyrenderer/tgaimage.h	/^    unsigned char* data;$/;"	m	class:TGAImage
data_	tinyrenderer/geometry.h	/^    T data_[DIM];$/;"	m	struct:vec
datatypecode	tinyrenderer/tgaimage.h	/^    char datatypecode;$/;"	m	struct:TGA_Header
det	tinyrenderer/geometry.h	/^    T det() const {$/;"	f	class:mat
det	tinyrenderer/geometry.h	/^    static T det(const mat<1,1,T>& src) {$/;"	f	struct:dt
det	tinyrenderer/geometry.h	/^    static T det(const mat<DIM,DIM,T>& src) {$/;"	f	struct:dt
diffuse	tinyrenderer/model.cpp	/^TGAColor Model::diffuse(Vec2f uvf) {$/;"	f	class:Model
diffusemap_	tinyrenderer/model.h	/^    TGAImage diffusemap_;$/;"	m	class:Model
dt	tinyrenderer/geometry.h	/^template<size_t DIM,typename T> struct dt {$/;"	s
dt	tinyrenderer/geometry.h	/^template<typename T> struct dt<1,T> {$/;"	s
embed	tinyrenderer/geometry.h	/^template<size_t LEN,size_t DIM,typename T> vec<LEN,T> embed(const vec<DIM,T> &v, T fill=1) {$/;"	f
face	tinyrenderer/model.cpp	/^std::vector<int> Model::face(int idx) {$/;"	f	class:Model
faces_	tinyrenderer/model.h	/^    std::vector<std::vector<Vec3i> > faces_; \/\/ attention, this Vec3i means vertex\/uv\/normal$/;"	m	class:Model
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
flip_horizontally	tinyrenderer/tgaimage.cpp	/^bool TGAImage::flip_horizontally() {$/;"	f	class:TGAImage
flip_vertically	tinyrenderer/tgaimage.cpp	/^bool TGAImage::flip_vertically() {$/;"	f	class:TGAImage
fragment	tinyrenderer/main.cpp	/^    virtual bool fragment(Vec3f bar, TGAColor &color) {$/;"	f	struct:Shader
get	tinyrenderer/tgaimage.cpp	/^TGAColor TGAImage::get(int x, int y) {$/;"	f	class:TGAImage
get_bytespp	tinyrenderer/tgaimage.cpp	/^int TGAImage::get_bytespp() {$/;"	f	class:TGAImage
get_height	tinyrenderer/tgaimage.cpp	/^int TGAImage::get_height() {$/;"	f	class:TGAImage
get_minor	tinyrenderer/geometry.h	/^    mat<DimRows-1,DimCols-1,T> get_minor(size_t row, size_t col) const {$/;"	f	class:mat
get_width	tinyrenderer/tgaimage.cpp	/^int TGAImage::get_width() {$/;"	f	class:TGAImage
height	tinyrenderer/main.cpp	/^const int height = 800;$/;"	v
height	tinyrenderer/tgaimage.h	/^    int height;$/;"	m	class:TGAImage
height	tinyrenderer/tgaimage.h	/^    short height;$/;"	m	struct:TGA_Header
identity	tinyrenderer/geometry.h	/^    static mat<DimRows,DimCols,T> identity() {$/;"	f	class:mat
idlength	tinyrenderer/tgaimage.h	/^    char idlength;$/;"	m	struct:TGA_Header
image	line.cpp	/^TGAImage image;$/;"	v
imagedescriptor	tinyrenderer/tgaimage.h	/^    char  imagedescriptor;$/;"	m	struct:TGA_Header
info_arch	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
invert	tinyrenderer/geometry.h	/^    mat<DimRows,DimCols,T> invert() {$/;"	f	class:mat
invert_transpose	tinyrenderer/geometry.h	/^    mat<DimRows,DimCols,T> invert_transpose() {$/;"	f	class:mat
load_rle_data	tinyrenderer/tgaimage.cpp	/^bool TGAImage::load_rle_data(std::ifstream &in) {$/;"	f	class:TGAImage
load_texture	tinyrenderer/model.cpp	/^void Model::load_texture(std::string filename, const char *suffix, TGAImage &img) {$/;"	f	class:Model
lookat	tinyrenderer/our_gl.cpp	/^void lookat(Vec3f eye, Vec3f center, Vec3f up) {$/;"	f
main	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	tinyrenderer/main.cpp	/^int main(int argc, char** argv) {$/;"	f
mat	tinyrenderer/geometry.h	/^    mat() {}$/;"	f	class:mat
mat	tinyrenderer/geometry.h	/^template<size_t DimRows,size_t DimCols,typename T> class mat {$/;"	c
model	tinyrenderer/main.cpp	/^Model *model        = NULL;$/;"	v
ndc_tri	tinyrenderer/main.cpp	/^    mat<3,3,float> ndc_tri;     \/\/ triangle in normalized device coordinates$/;"	m	struct:Shader	file:
nfaces	tinyrenderer/model.cpp	/^int Model::nfaces() {$/;"	f	class:Model
norm	tinyrenderer/geometry.h	/^    float norm() { return std::sqrt(x*x+y*y+z*z); }$/;"	f	struct:vec
normal	tinyrenderer/model.cpp	/^Vec3f Model::normal(Vec2f uvf) {$/;"	f	class:Model
normal	tinyrenderer/model.cpp	/^Vec3f Model::normal(int iface, int nthvert) {$/;"	f	class:Model
normalize	tinyrenderer/geometry.h	/^    vec<3,T> & normalize(T l=1) { *this = (*this)*(l\/norm()); return *this; }$/;"	f	struct:vec
normalmap_	tinyrenderer/model.h	/^    TGAImage normalmap_;$/;"	m	class:Model
norms_	tinyrenderer/model.h	/^    std::vector<Vec3f> norms_;$/;"	m	class:Model
nverts	tinyrenderer/model.cpp	/^int Model::nverts() {$/;"	f	class:Model
operator *	tinyrenderer/geometry.h	/^template<size_t DIM,typename T,typename U> vec<DIM,T> operator*(vec<DIM,T> lhs, const U& rhs) {$/;"	f
operator *	tinyrenderer/geometry.h	/^template<size_t DIM,typename T> T operator*(const vec<DIM,T>& lhs, const vec<DIM,T>& rhs) {$/;"	f
operator *	tinyrenderer/geometry.h	/^template<size_t DimRows,size_t DimCols,typename T> vec<DimRows,T> operator*(const mat<DimRows,DimCols,T>& lhs, const vec<DimCols,T>& rhs) {$/;"	f
operator *	tinyrenderer/geometry.h	/^template<size_t R1,size_t C1,size_t C2,typename T>mat<R1,C2,T> operator*(const mat<R1,C1,T>& lhs, const mat<C1,C2,T>& rhs) {$/;"	f
operator *	tinyrenderer/tgaimage.h	/^    TGAColor operator *(float intensity) const {$/;"	f	struct:TGAColor
operator +	tinyrenderer/geometry.h	/^template<size_t DIM,typename T>vec<DIM,T> operator+(vec<DIM,T> lhs, const vec<DIM,T>& rhs) {$/;"	f
operator -	tinyrenderer/geometry.h	/^template<size_t DIM,typename T>vec<DIM,T> operator-(vec<DIM,T> lhs, const vec<DIM,T>& rhs) {$/;"	f
operator /	tinyrenderer/geometry.h	/^template<size_t DIM,typename T,typename U> vec<DIM,T> operator\/(vec<DIM,T> lhs, const U& rhs) {$/;"	f
operator /	tinyrenderer/geometry.h	/^template<size_t DimRows,size_t DimCols,typename T>mat<DimCols,DimRows,T> operator\/(mat<DimRows,DimCols,T> lhs, const T& rhs) {$/;"	f
operator <<	tinyrenderer/geometry.h	/^template <size_t DIM, typename T> std::ostream& operator<<(std::ostream& out, vec<DIM,T>& v) {$/;"	f
operator <<	tinyrenderer/geometry.h	/^template <size_t DimRows,size_t DimCols,class T> std::ostream& operator<<(std::ostream& out, mat<DimRows,DimCols,T>& m) {$/;"	f
operator =	tinyrenderer/tgaimage.cpp	/^TGAImage & TGAImage::operator =(const TGAImage &img) {$/;"	f	class:TGAImage
operator []	tinyrenderer/geometry.h	/^          T& operator[](const size_t i)       { assert(i<2); return i<=0 ? x : y; }$/;"	f	struct:vec
operator []	tinyrenderer/geometry.h	/^          T& operator[](const size_t i)       { assert(i<3); return i<=0 ? x : (1==i ? y : z); }$/;"	f	struct:vec
operator []	tinyrenderer/geometry.h	/^          T& operator[](const size_t i)       { assert(i<DIM); return data_[i]; }$/;"	f	struct:vec
operator []	tinyrenderer/geometry.h	/^    const T& operator[](const size_t i) const { assert(i<2); return i<=0 ? x : y; }$/;"	f	struct:vec
operator []	tinyrenderer/geometry.h	/^    const T& operator[](const size_t i) const { assert(i<3); return i<=0 ? x : (1==i ? y : z); }$/;"	f	struct:vec
operator []	tinyrenderer/geometry.h	/^    const T& operator[](const size_t i) const { assert(i<DIM); return data_[i]; }$/;"	f	struct:vec
operator []	tinyrenderer/geometry.h	/^    const vec<DimCols,T>& operator[] (const size_t idx) const {$/;"	f	class:mat
operator []	tinyrenderer/geometry.h	/^    vec<DimCols,T>& operator[] (const size_t idx) {$/;"	f	class:mat
operator []	tinyrenderer/tgaimage.h	/^    unsigned char& operator[](const int i) { return bgra[i]; }$/;"	f	struct:TGAColor
proj	tinyrenderer/geometry.h	/^template<size_t LEN,size_t DIM, typename T> vec<LEN,T> proj(const vec<DIM,T> &v) {$/;"	f
projection	tinyrenderer/our_gl.cpp	/^void projection(float coeff) {$/;"	f
qnxnto	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.14.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
read_tga_file	tinyrenderer/tgaimage.cpp	/^bool TGAImage::read_tga_file(const char *filename) {$/;"	f	class:TGAImage
rows	tinyrenderer/geometry.h	/^    vec<DimCols,T> rows[DimRows];$/;"	m	class:mat
scale	tinyrenderer/tgaimage.cpp	/^bool TGAImage::scale(int w, int h) {$/;"	f	class:TGAImage
set	tinyrenderer/tgaimage.cpp	/^bool TGAImage::set(int x, int y, TGAColor &c) {$/;"	f	class:TGAImage
set	tinyrenderer/tgaimage.cpp	/^bool TGAImage::set(int x, int y, const TGAColor &c) {$/;"	f	class:TGAImage
set_col	tinyrenderer/geometry.h	/^    void set_col(size_t idx, vec<DimRows,T> v) {$/;"	f	class:mat
specular	tinyrenderer/model.cpp	/^float Model::specular(Vec2f uvf) {$/;"	f	class:Model
specularmap_	tinyrenderer/model.h	/^    TGAImage specularmap_;$/;"	m	class:Model
transpose	tinyrenderer/geometry.h	/^    mat<DimCols,DimRows,T> transpose() {$/;"	f	class:mat
triangle	tinyrenderer/our_gl.cpp	/^void triangle(mat<4,3,float> &clipc, IShader &shader, TGAImage &image, float *zbuffer) {$/;"	f
unload_rle_data	tinyrenderer/tgaimage.cpp	/^bool TGAImage::unload_rle_data(std::ofstream &out) {$/;"	f	class:TGAImage
uv	tinyrenderer/model.cpp	/^Vec2f Model::uv(int iface, int nthvert) {$/;"	f	class:Model
uv_	tinyrenderer/model.h	/^    std::vector<Vec2f> uv_;$/;"	m	class:Model
varying_nrm	tinyrenderer/main.cpp	/^    mat<3,3,float> varying_nrm; \/\/ normal per vertex to be interpolated by FS$/;"	m	struct:Shader	file:
varying_tri	tinyrenderer/main.cpp	/^    mat<4,3,float> varying_tri; \/\/ triangle coordinates (clip coordinates), written by VS, read by FS$/;"	m	struct:Shader	file:
varying_uv	tinyrenderer/main.cpp	/^    mat<2,3,float> varying_uv;  \/\/ triangle uv coordinates, written by the vertex shader, read by the fragment shader$/;"	m	struct:Shader	file:
vec	tinyrenderer/geometry.cpp	/^template <> template <> vec<2,float>::vec(const vec<2,int> &v)   : x(v.x),y(v.y) {}$/;"	f	class:vec
vec	tinyrenderer/geometry.cpp	/^template <> template <> vec<2,int>  ::vec(const vec<2,float> &v) : x(int(v.x+.5f)),y(int(v.y+.5f)) {}$/;"	f	class:vec
vec	tinyrenderer/geometry.cpp	/^template <> template <> vec<3,float>::vec(const vec<3,int> &v)   : x(v.x),y(v.y),z(v.z) {}$/;"	f	class:vec
vec	tinyrenderer/geometry.cpp	/^template <> template <> vec<3,int>  ::vec(const vec<3,float> &v) : x(int(v.x+.5f)),y(int(v.y+.5f)),z(int(v.z+.5f)) {}$/;"	f	class:vec
vec	tinyrenderer/geometry.h	/^    vec() : x(T()), y(T()) {}$/;"	f	struct:vec
vec	tinyrenderer/geometry.h	/^    vec() : x(T()), y(T()), z(T()) {}$/;"	f	struct:vec
vec	tinyrenderer/geometry.h	/^    vec() { for (size_t i=DIM; i--; data_[i] = T()); }$/;"	f	struct:vec
vec	tinyrenderer/geometry.h	/^    vec(T X, T Y) : x(X), y(Y) {}$/;"	f	struct:vec
vec	tinyrenderer/geometry.h	/^    vec(T X, T Y, T Z) : x(X), y(Y), z(Z) {}$/;"	f	struct:vec
vec	tinyrenderer/geometry.h	/^template <size_t DIM, typename T> struct vec {$/;"	s
vec	tinyrenderer/geometry.h	/^template <typename T> struct vec<2,T> {$/;"	s
vec	tinyrenderer/geometry.h	/^template <typename T> struct vec<3,T> {$/;"	s
vert	tinyrenderer/model.cpp	/^Vec3f Model::vert(int i) {$/;"	f	class:Model
vert	tinyrenderer/model.cpp	/^Vec3f Model::vert(int iface, int nthvert) {$/;"	f	class:Model
vertex	tinyrenderer/main.cpp	/^    virtual Vec4f vertex(int iface, int nthvert) {$/;"	f	struct:Shader
verts_	tinyrenderer/model.h	/^    std::vector<Vec3f> verts_;$/;"	m	class:Model
viewport	tinyrenderer/our_gl.cpp	/^void viewport(int x, int y, int w, int h) {$/;"	f
volatile	build/CMakeFiles/3.14.5/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
white	line.cpp	/^const TGAColor white = TGAColor(255,255,255,255);$/;"	v
width	tinyrenderer/main.cpp	/^const int width  = 800;$/;"	v
width	tinyrenderer/tgaimage.h	/^    int width;$/;"	m	class:TGAImage
width	tinyrenderer/tgaimage.h	/^    short width;$/;"	m	struct:TGA_Header
write_tga_file	tinyrenderer/tgaimage.cpp	/^bool TGAImage::write_tga_file(const char *filename, bool rle) {$/;"	f	class:TGAImage
x	tinyrenderer/geometry.h	/^    T x,y,z;$/;"	m	struct:vec
x	tinyrenderer/geometry.h	/^    T x,y;$/;"	m	struct:vec
x_origin	tinyrenderer/tgaimage.h	/^    short x_origin;$/;"	m	struct:TGA_Header
y	tinyrenderer/geometry.h	/^    T x,y,z;$/;"	m	struct:vec
y	tinyrenderer/geometry.h	/^    T x,y;$/;"	m	struct:vec
y_origin	tinyrenderer/tgaimage.h	/^    short y_origin;$/;"	m	struct:TGA_Header
z	tinyrenderer/geometry.h	/^    T x,y,z;$/;"	m	struct:vec
~IShader	tinyrenderer/our_gl.cpp	/^IShader::~IShader() {}$/;"	f	class:IShader
~Model	tinyrenderer/model.cpp	/^Model::~Model() {}$/;"	f	class:Model
~TGAImage	tinyrenderer/tgaimage.cpp	/^TGAImage::~TGAImage() {$/;"	f	class:TGAImage
